" =============================================================================
" plugins and modules
" =============================================================================
call plug#begin('~/.local/share/nvim/plugged')
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'neovim/nvim-lspconfig'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-vinegar'
Plug 'nvim-lua/plenary.nvim'
Plug 'lewis6991/gitsigns.nvim'
Plug 'justinmk/vim-sneak'
Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-fugitive'
Plug 'chriskempson/base16-vim'
call plug#end()

" =============================================================================
" configs
" =============================================================================
set laststatus=2
set statusline=\ %<%f\ ║\ %h%m%r%{FugitiveStatusline()}%=\ ║█▓▒░\ %-14.(%l,%c%V%)\ %P\ 
colorscheme base16-tomorrow-night-eighties
let g:markdown_fenced_languages = ['html', 'javascript', 'rust']
set foldmethod=indent
set foldlevel=20
set spelllang=en_us
if has('nvim')
  tmap <C-o> <C-\><C-n>
endif
if exists('+termguicolors')
  set termguicolors
endif
let g:fzf_preview_window = []
let g:fzf_colors =                                                                         
    \ { 'fg':      ['fg', 'Normal'],                                                           
      \ 'bg':      ['bg', 'Normal'],                                                           
      \ 'hl':      ['fg', 'Comment'],                                                          
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],                             
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],                                       
      \ 'hl+':     ['fg', 'Statement'],                                                        
      \ 'info':    ['fg', 'PreProc'],                                                          
      \ 'border':  ['fg', 'Ignore'],                                                           
      \ 'prompt':  ['fg', 'Conditional'],                                                      
      \ 'pointer': ['fg', 'Exception'],                                                        
      \ 'marker':  ['fg', 'Keyword'],                                                          
      \ 'spinner': ['fg', 'Label'],                                                            
      \ 'header':  ['fg', 'Comment'] }
set completeopt=menu,menuone,noselect
set noshowmode
set noshowcmd
set nu
set wrap
set hidden
set noerrorbells
set signcolumn=yes
set clipboard=unnamedplus
set encoding=UTF-8
set scrolloff=8
set splitbelow
set splitright
set ignorecase
set smartcase
set title
set ruler
set number
set so=7
set wildmode=list:longest
set wildmenu
set expandtab
set tabstop=2 softtabstop=2
set shiftwidth=2
set smartindent
set termguicolors
set noswapfile
set nobackup
set nowb
set cursorline
set shortmess+=c
set updatetime=100

" =============================================================================
" rebinds
" =============================================================================
let mapleader = " "
inoremap jk <Esc>
nmap <C-g> :G diff<cr>
nnoremap <C-s> :Sex<cr>
nnoremap Y y$
nnoremap <Esc> :noh<cr>
" ===== keep cursor in the middle ======
nnoremap n nzzzv
nnoremap N Nzzzv
nnoremap J mzJ`z
" ===== add undo breakpoints ===========
inoremap , ,<c-g>u
inoremap . .<c-g>u
inoremap ! !<c-g>u
inoremap ? ?<c-g>u
" ===== move text ======================
vnoremap K :m '<-2<CR>gv=gv
vnoremap J :m '>+1<CR>gv=gv
inoremap <C-j> <esc>:m .+1<CR>==
inoremap <C-k> <esc>:m .-2<CR>==
nnoremap <leader>k :m .-2<CR>==
nnoremap <leader>j :m .+1<CR>==
" ===== split nav ======================
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
" ===== folds ==========================
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
nnoremap <Tab> za
" ===== FZF.vim ========================
nnoremap <C-p> :GFiles<cr>
nnoremap <C-f> :Rg<cr>
nnoremap <C-b> :Buffers<cr>

" =============================================================================
" lua configs
" =============================================================================
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true, 
  },
}
local nvim_lsp = require('lspconfig')
require'lspconfig'.rust_analyzer.setup({
    on_attach=on_attach,
    settings = {
        ["rust-analyzer"] = {
            assist = {
                importGranularity = "module",
                importPrefix = "by_self",
            },
            cargo = {
                loadOutDirsFromCheck = true
            },
            procMacro = {
                enable = true
            },
        }
    }
})
require'lspconfig'.tsserver.setup{}
local servers = { "rust_analyzer", "tsserver"}
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
local cmp = require('cmp')
cmp.setup({
  sources = {
    { name = 'nvim_lsp', keyword_length = 3 },
    { name = 'path' },
    { name = 'buffer', keyword_length = 5 },
  },
})
require('gitsigns').setup()
EOF
